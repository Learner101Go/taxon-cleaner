# docker-compose.yml
services:
  # Redis for cleaning tool (on port 6380 internally, 6380 on host)
  cleaning-redis:
    image: redis:7-alpine
    # Configure Redis server memory limits and eviction policy via command-line args.
    # This ensures Redis enforces maxmemory and eviction policy at runtime.
    command: [
        'redis-server',
        '--maxmemory',
        '2gb',
        '--maxmemory-policy',
        'noeviction',
        # Optional: persistence settings; adjust or remove as needed
        '--save',
        '900',
        '1', # snapshot every 900s if >=1 change
        '--appendonly',
        'yes', # enable AOF
        '--appendfsync',
        'everysec', # AOF fsync policy
        # You can mount a custom redis.conf instead if preferred:
        # e.g. "redis-server", "/usr/local/etc/redis/redis.conf"
      ]
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    networks:
      - cleaning-net
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # NestJS API service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: runner
    ports:
      - '3001:3000' # Host 3001 → Container 3000
    environment:
      - SYMBIOTA_API=${SYMBIOTA_API} # Moved here from UI service
      - REDIS_URL=redis://cleaning-redis:6379
      - NODE_ENV=production
    depends_on:
      - cleaning-redis
    networks:
      - cleaning-net
    restart: unless-stopped

  # Angular UI service (served via nginx)
  ui:
    build:
      context: .
      dockerfile: apps/ui/Dockerfile
      target: production
    ports:
      - '4201:80' # Host 4201 → Container 80
    environment:
      # - REDIS_URL=redis://cleaning-redis:6379
      - NODE_ENV=production
    depends_on:
      - api
    networks:
      - cleaning-net
    restart: unless-stopped

volumes:
  redis_data:

networks:
  cleaning-net:
    driver: bridge
